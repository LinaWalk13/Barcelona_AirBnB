library(tidyverse)
# library(htmltools)
# library(googlesheets4)
library(mapview)
mun_sp<- readRDS('../data/gadm36_DNK_2_sp.rds')
mun_sf <- st_sf(mun_sp)
mun_sf <- st_sf(mun_sp)
mun_sf <- st_as_sf(mun_sp)
mun_sf <- st_as_sf(mun_sp)
mun <- st_transform(mun_sf, crs = 4326)
# Load the spatial data, project to UTM
mun_sp<- readRDS('../data/gadm36_DNK_2_sp.rds')
mun_sf <- st_as_sf(mun_sp)
mun <- st_transform(mun_sf, crs = 25832)
# Load the spatial data, project to UTM
mun_sp<- readRDS('../data/gadm36_DNK_2_sp.rds')
mun_sf <- st_as_sf(mun_sp)
mun <- st_transform(mun_sf, crs = 25832)
# Plot so as to check correct location and complete coverage
plot(mun$NAME_2)
mun$NAME_2
glimpse(elections_data)
elections_data <- readRDS("../data/elections.rds")
# Check municipality names and simplify polygons (if taking too long to render)
glimpse(elections_data$)
glimpse(elections_data)
glimpse(elections_data)
head(elections_data)
df <- read_csv("listings.csv")
gwd
df <- read_csv("listings.csv")
setwd("/Users/lina/Documents/GitHub/Barcelona_AirBnB")
df <- read_csv("listings.csv")
df <- read_csv("data/listings.csv")
df <- read_csv("../data/listings.csv")
# Load packages
library(dplyr)
library(lubridate)
library(readr)
# Read data
df <- read_csv("../data/listings.csv")
# Select relevant columns
df_clean <- df %>%
select(id = airbnb_id,
neighbourhood = neighbourhood_cleansed,
latitude,
longitude,
price,
room_type,
property_type,
first_review,
number_of_reviews)
# Load packages
library(dplyr)
library(lubridate)
library(readr)
# Read data
df <- read_csv("../data/listings.csv")
# Select relevant columns
df_clean <- df %>%
select(id,
neighbourhood,
latitude,
longitude,
price,
room_type,
property_type,
first_review,
number_of_reviews)
# Read data
listings <- read_csv("../data/listings.csv")
# Parse dates to get year information
listings <- listings %>%
mutate(first_review = as.Date(first_review, format = "%d.%m.%y"))
# Load packages
library(dplyr)
library(lubridate)
library(readr)
# Read data
listings <- read_csv("../data/listings.csv")
# Parse dates to get year information
listings <- listings %>%
mutate(first_review = as.Date(first_review, format = "%d.%m.%y"))
# create presence flag for 2015
listings <- listings %>%
mutate(in_2015 = if_else(!is.na(first_review) & first_review <= as.Date("2015-12-31"), 1, 0))
summary(listings$in_2015)
table(listings$in_2015)
# Load packages
library(dplyr)
library(lubridate)
library(readr)
# Read data
listings <- read_csv("../data/listings.csv")
# Parse dates to get year information
listings <- listings %>%
mutate(first_review = as.Date(first_review, format = "%d.%m.%y"))
# create presence flag for 2015
listings <- listings %>%
mutate(in_2015 = if_else(!is.na(first_review) & first_review <= as.Date("2015-12-31"), 1, 0))
summary(listings$in_2015)
table(listings$in_2015)
View(listings)
View(listings)
listings$in_2015
View(listings)
View(listings)
# Load packages
library(dplyr)
library(lubridate)
library(readr)
# Read data
listings <- read_csv("../data/listings.csv")
# Parse dates to get year information
listings <- listings %>%
select(id,
host_id,
host_neighbourhood,
neighbourhood_cleansed,
first_review,
latitude,
longitude,
property_type,
room_type,
price
)
mutate(first_review = as.Date(first_review, format = "%d.%m.%y"))
# Load packages
library(dplyr)
library(lubridate)
library(readr)
# Read data
listings <- read_csv("../data/listings.csv")
# Parse dates to get year information
listings <- listings %>%
select(id,
host_id,
host_neighbourhood,
neighbourhood_cleansed,
first_review,
latitude,
longitude,
property_type,
room_type,
price
) +
mutate(first_review = as.Date(first_review, format = "%d.%m.%y"))
# Load packages
library(dplyr)
library(lubridate)
library(readr)
# Read data
listings <- read_csv("../data/listings.csv")
# Parse dates to get year information
listings <- listings %>%
select(id,
host_id,
host_neighbourhood,
neighbourhood_cleansed,
first_review,
latitude,
longitude,
property_type,
room_type,
price
)
# create presence flag for 2015
listings <- listings %>%
mutate(in_2015 = if_else(!is.na(first_review) & first_review <= as.Date("2015-12-31"), 1, 0))
# Load packages
library(dplyr)
library(lubridate)
library(readr)
# Read data
listings <- read_csv("../data/listings.csv")
# Parse dates to get year information
listings <- listings %>%
select(id,
host_id,
host_neighbourhood,
neighbourhood_cleansed,
first_review,
latitude,
longitude,
property_type,
room_type,
price
)
listings <- listings %>%
mutate(first_review = as.Date(first_review, format = "%d.%m.%y"))
# create presence flag for 2015
listings <- listings %>%
mutate(in_2015 = if_else(!is.na(first_review) & first_review <= as.Date("2015-12-31"), 1, 0))
View(listings)
shapefile_path <- st_read("../BCN_UNITATS_ADM/0301040100_TermeMunicipal_UNITATS_ADM.shp")
library(sf)
library(ggplot2)
# Convert to sf object using longitude and latitude columns form data
airbnb_sf <- st_as_sf(df_clean,
coords = c("longitude", "latitude"),
crs = 4326)  # WGS 84 – standard lat/lon
library(sf)
library(ggplot2)
# Convert to sf object using longitude and latitude columns form data
airbnb_sf <- st_as_sf(listings,
coords = c("longitude", "latitude"),
crs = 4326)  # WGS 84 – standard lat/lon
###### BOUNDARIES
shapefile_path <- st_read("../BCN_UNITATS_ADM/0301040100_SecCens_UNITATS_ADM.shp")
library(sf)
library(ggplot2)
# Convert to sf object using longitude and latitude columns form data
airbnb_sf <- st_as_sf(listings,
coords = c("longitude", "latitude"),
crs = 4326)  # WGS 84 – standard lat/lon
###### BOUNDARIES
shapefile_path <- st_read("../data/BCN_UNITATS_ADM/0301040100_SecCens_UNITATS_ADM.shp")
# Read the shapefile
bcn_units <- st_read(shapefile_path)
library(sf)
library(ggplot2)
# Convert to sf object using longitude and latitude columns form data
airbnb_sf <- st_as_sf(listings,
coords = c("longitude", "latitude"),
crs = 4326)  # WGS 84 – standard lat/lon
###### BOUNDARIES
secCens <- st_read("../data/BCN_UNITATS_ADM/0301040100_SecCens_UNITATS_ADM.shp")
# Read the shapefile
# View basic info
plot(secCens$geometry)
head(secCens)
st_crs(secCens)
library(sf)
library(ggplot2)
# Convert to sf object using longitude and latitude columns form data
airbnb_sf <- st_as_sf(listings,
coords = c("longitude", "latitude"),
crs = 4326)  # WGS 84 – standard lat/lon
###### BOUNDARIES
secCens <- st_read("../data/BCN_UNITATS_ADM/0301040100_SecCens_UNITATS_ADM.shp")
# info
plot(secCens$geometry)
head(secCens)
st_crs(secCens)
# Transform to match CRS
secCens_4326 <- st_transform(bcn_units, crs = 4326)
secCens_4326 <- st_transform(secCens, crs = 4326)
names(secCens_4326)
airbnb_joined <- st_join(airbnb_sf, secCens_4326)
# Count listings per unit
airbnb_density <- airbnb_joined %>%
group_by(SEC_CENS) %>%  # Replace with the column identifying the unit (use `names(bcn_units)` to find it)
summarise(listings_2015 = sum(in_2015, na.rm = TRUE))
library(ggplot2)
# Merge with original units to keep geometry
bcn_units_joined <- left_join(bcn_units, airbnb_density, by = "NAME_FIELD_OR_CODE")
tm_shape(bcn_units) +
tm_borders(col = "gray70") +
tm_shape(airbnb_sf) +
tm_dots(col = "in_2015",
palette = c("gray", "red"),
title = "Listed in 2015",
size = 0.05,
alpha = 0.5) +
tm_layout(title = "Airbnb Listings in Barcelona")
library(tmap)
tmap_mode("plot")
tm_shape(bcn_units) +
tm_borders(col = "gray70") +
tm_shape(airbnb_sf) +
tm_dots(col = "in_2015",
palette = c("gray", "red"),
title = "Listed in 2015",
size = 0.05,
alpha = 0.5) +
tm_layout(title = "Airbnb Listings in Barcelona")
library(tmap)
tm_shape(bcn_units) +
tm_borders(col = "gray70") +
tm_shape(airbnb_sf) +
tm_dots(col = "in_2015",
palette = c("gray", "red"),
title = "Listed in 2015",
size = 0.05,
alpha = 0.5) +
tm_layout(title = "Airbnb Listings in Barcelona")
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = bcn_units,
fillColor = "transparent",
color = "black",
weight = 1,
opacity = 0.5,
group = "Neighborhoods") %>%
addCircleMarkers(data = airbnb_sf,
radius = 3,
color = "red",
stroke = FALSE,
fillOpacity = 0.6,
group = "Airbnb Listings") %>%
addLayersControl(overlayGroups = c("Neighborhoods", "Airbnb Listings"),
options = layersControlOptions(collapsed = FALSE))
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = bcn_units,
fillColor = "transparent",
color = "black",
weight = 1,
opacity = 0.5,
group = "Neighborhoods") %>%
addCircleMarkers(data = airbnb_sf,
radius = 3,
color = "red",
stroke = FALSE,
fillOpacity = 0.6,
group = "Airbnb Listings")
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = bcn_units,
fillColor = "transparent",
color = "black",
weight = 1,
opacity = 0.5,
group = "Neighborhoods") %>%
addMarkers(data = airbnb_sf,
radius = 3,
color = "red",
stroke = FALSE,
fillOpacity = 0.6,
group = "Airbnb Listings")
install.packages("leaflet.extras")
library(leaflet.extras)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = bcn_units,
fillColor = "transparent",
color = "black",
weight = 1,
opacity = 0.5) %>%
addHeatmap(data = airbnb_sf,
blur = 20,
max = 0.05,
radius = 10)
install.packages("leaflet.extras")
library(leaflet.extras)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = bcn_units,
fillColor = "transparent",
color = "black",
weight = 1,
opacity = 0.5) %>%
addHeatmap(data = airbnb_sf,
blur = 20,
max = 0.05,
radius = 10)
# Load tmap (great for thematic mapping)
library(tmap)
# Plot Airbnb listings on top of neighborhood boundaries
tm_shape(secCens_4326) +
tm_polygons(col = "lightgrey", border.col = "black", alpha = 0.5) +
tm_shape(airbnb_sf) +
tm_dots(col = "in_2015", palette = c("red", "blue"), size = 0.05,
title = "Airbnb presence in 2015",
legend.show = TRUE) +
tm_layout(title = "Airbnb Listings and Administrative Units in Barcelona",
legend.outside = TRUE)
library(tmap)
# Static map mode
tmap_mode("plot")
# Plot boundaries and filtered listings
tm_shape(secCens_4326) +
tm_polygons(col = "lightgrey", border.col = "black", alpha = 0.6) +
tm_shape(airbnb_2015) +
tm_dots(col = "dodgerblue", size = 0.05, alpha = 0.8,
title = "Listings active in 2015") +
tm_layout(title = "Airbnb Listings in Barcelona Active in 2015",
legend.outside = TRUE)
library(tmap)
# Plot boundaries and filtered listings
tm_shape(secCens_4326) +
tm_polygons(col = "lightgrey", border.col = "black", alpha = 0.6) +
tm_shape(airbnb_2015) +
tm_dots(col = "dodgerblue", size = 0.05, alpha = 0.8,
title = "Listings active in 2015") +
tm_layout(title = "Airbnb Listings in Barcelona Active in 2015",
legend.outside = TRUE)
library(tmap)
# Plot boundaries and filtered listings
tm_shape(secCens_4326) +
tm_polygons(col = "lightgrey", border.col = "black", fill_alpha = 0.6) +
tm_shape(airbnb_2015) +
tm_dots(col = "dodgerblue", size = 0.05, fill_alpha = 0.8,
title = "Listings active in 2015") +
tm_layout(title = "Airbnb Listings in Barcelona Active in 2015",
legend.outside = TRUE)
# dataset for 2015
# Filter Airbnb listings active in 2015
airbnb_2015 <- airbnb_sf %>%
filter(in_2015 == 1)
# create presence flag for 2015
listings <- listings %>%
mutate(in_2015 = if_else(!is.na(first_review) & first_review <= as.Date("2015-12-31"), 1, 0))
# Load packages
library(dplyr)
library(lubridate)
library(readr)
# Read data
listings <- read_csv("../data/listings.csv")
# Parse dates to get year information
listings <- listings %>%
select(id,
host_id,
host_neighbourhood,
neighbourhood_cleansed,
first_review,
latitude,
host_listings_count,
longitude,
property_type,
room_type,
price
)
listings <- listings %>%
mutate(first_review = as.Date(first_review, format = "%d.%m.%y"))
# create presence flag for 2015
listings <- listings %>%
mutate(in_2015 = if_else(!is.na(first_review) & first_review <= as.Date("2015-12-31"), 1, 0))
listings2015 <- listings %>%
filter(in_2015 == 1)
library(sf)
library(ggplot2)
# Convert to sf object using longitude and latitude columns form data
airbnb_sf <- st_as_sf(listings,
coords = c("longitude", "latitude"),
crs = 4326)  # WGS 84 – standard lat/lon
airbnb_2015 <- st_as_sf(listings2015,
coords = c("longitude", "latitude"),
crs = 4326)
###### BOUNDARIES
secCens <- st_read("../data/BCN_UNITATS_ADM/0301040100_SecCens_UNITATS_ADM.shp")
# info
plot(secCens$geometry)
head(secCens)
st_crs(secCens)
# Transform to match CRS
secCens_4326 <- st_transform(secCens, crs = 4326)
names(secCens_4326)
library(tmap)
# Plot boundaries and filtered listings
tm_shape(secCens_4326) +
tm_polygons(col = "lightgrey", border.col = "black", fill_alpha = 0.6) +
tm_shape(airbnb_2015) +
tm_dots(col = "dodgerblue", size = 0.05, fill_alpha = 0.8,
title = "Listings active in 2015") +
tm_layout(title = "Airbnb Listings in Barcelona Active in 2015",
legend.outside = TRUE)
library(tmap)
# Plot boundaries and filtered listings
tm_shape(secCens_4326) +
tm_polygons(col = "lightgrey", border.col = "black", fill_alpha = 0.6) +
tm_shape(airbnb_2015) +
tm_dots(col = "green", size = 0.05, fill_alpha = 0.8,
title = "Listings active in 2015") +
tm_layout(title = "Airbnb Listings in Barcelona Active in 2015",
legend.outside = TRUE)
View(airbnb_2015)
library(tmap)
tm_shape(secCens_4326) +
tm_polygons(col = "lightgrey", border.col = "black", alpha = 0.5) +
tm_shape(airbnb_sf) +
tm_dots(col = "green", size = 0.05,
title = "Airbnb presence in 2015",
legend.show = TRUE) +
tm_layout(title = "Airbnb Listings and Administrative Units in Barcelona",
legend.outside = TRUE)
library(tmap)
tm_shape(secCens_4326) +
tm_polygons(col = "lightgrey", border.col = "black", alpha = 0.5) +
tm_shape(airbnb_sf) +
tm_dots(col = "white", size = 0.01,
title = "Airbnb presence in 2015",
legend.show = TRUE) +
tm_layout(title = "Airbnb Listings and Administrative Units in Barcelona",
legend.outside = TRUE)
library(tmap)
tm_shape(secCens_4326) +
tm_polygons(col = "lightgrey", border.col = "black", alpha = 0.5) +
tm_shape(airbnb_sf) +
tm_dots(col = "red", size = 0.01,
title = "Airbnb presence in 2015",
legend.show = TRUE) +
tm_layout(title = "Airbnb Listings and Administrative Units in Barcelona",
legend.outside = TRUE)
library(tmap)
tm_shape(secCens_4326) +
tm_polygons(col = "lightgrey", border.col = "black", alpha = 0.5) +
tm_shape(airbnb_2015) +
tm_dots(col = "red", size = 0.01,
title = "Airbnb presence in 2015",
legend.show = TRUE) +
tm_layout(title = "Airbnb Listings and Administrative Units in Barcelona",
legend.outside = TRUE)
library(tmap)
tm_shape(secCens_4326) +
tm_polygons(col = "lightgrey", border.col = "black", alpha = 0.5) +
tm_shape(airbnb_2015) +
tm_dots(col = "red", size = 0.03,
title = "Airbnb presence in 2015",
legend.show = TRUE) +
tm_layout(title = "Airbnb Listings and Administrative Units in Barcelona",
legend.outside = TRUE)
